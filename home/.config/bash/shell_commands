#!/usr/bin/env bash

# This file defines new Bash commands that are too complicated to be aliases, but too simple to get
# their own script file in ~/bin. These commands are defined as functions, and this file is sourced
# in ~/.bash_profile so that these functions are available globally in Bash.


# Make a directory and immediately cd to it
mkcd() {
    mkdir -p -v "$@" && cd "$@"
}


# Search for files in <path> (defaults to '.') whose filename includes <name>
# Usage: findfiles <name> [<path>]
findfiles() {
    if [[ $# -gt 1 ]]; then
        local search_path=$2
    else
        local search_path='.'
    fi
    find $search_path -iname "*$1*"
}


# Make a tmp directory, switch to it and copy its name to the system's paste buffer
delme () {
    local TMPDIR="$(mktemp -d -t delme)"
    cd "$TMPDIR"
    [[ "$OS" == "Mac" ]] && pwd | tr -d "\n" | pbcopy
}



# Check the spelling of a word with aspell (if installed)
if type -t aspell>/dev/null; then
	spell() {
		echo "$@" | aspell pipe | grep -v 'but really Aspell'
	}
fi


# Grep for a process name and show the results
psgrep() {
	search_term="$*"
	procs="$(command ps -Aww -o pid,user,command)"
	echo "$procs" | head -n 1
	echo "$procs" | grep -i "[${search_term:0:1}]${search_term:1}"
}


# Takes in a PATH-like argument (defaults to $PATH itself if no arguments are given), removes
# duplicate entries, and prints it (still in PATH-like format) to stdout. The path components are
# kept in original order. If a component is duplicated, it is ordered according to its first
# occurrence.
normalize_path() {
    local to_norm="$PATH"
    [[ $# > 0 ]] && to_norm="$1"
    printf '%s' "$to_norm" | sed -e 's/:$/:TRAILINGNULL/' | awk 'BEGIN { RS=":"; } {n[$0]++; if(NR > 1) { printf(":"); } printf("%s", $0); }' | sed -e 's/:TRAILINGNULL$/:/'
}


# `xssh`: shortcut for `ssh -O exit`, to quickly close a shared master SSH connection
sshq() {
    if ssh -O check $* 2>/dev/null >/dev/null; then
        ssh -O exit $*
    fi
}
# Enable standard `ssh` bash command competions for `sshe`
[[ -f /usr/local/share/bash-completion/completions/ssh ]] && \
    source /usr/local/share/bash-completion/completions/ssh && \
    complete -F _ssh sshq


if [[ "$OS" == "Mac" ]] && [[ -f ~/.config/bash/shell_commands.mac ]]; then
    source ~/.config/bash/shell_commands.mac
elif [[ "$OS" == "Linux" ]]; then
    source ~/.config/bash/shell_commands.linux
fi


# `cats`: view a file with syntax highlighting.
# Requires `pygments` to be installed to work. On OS X: You need to upgrade pip first. IPython also
# installs a conflicting version of pygments, so if that has been installed, it can cause problems.
# The full command is:
#   `pip install --upgrade setuptools && pip install --upgrade pip && \
#    pip install -I --force-reinstall pygments && pip install mistune`
# On Linux, it's just: `sudo apt-get install python-pygments`
#scat() {
    ## TODO: Support piped intput in addition to file path arguments
    #local source_file="$@"

    ## Options passed to pygments. `-P style=native` uses the color scheme named "native",
    ## `-f terminal256` tells it to out the results in 256-color terminal mode, and `-g` tells it to
    ## guess the syntax of the sourcefile.
    #local pygments_opts='-P style=native -f terminal256 -g'

    ## Check if the length of the source file is greater then the height of the terminal
    #if [[ $(wc -l "$source_file" | sed -e 's/[^0-9]//g') -gt $(tput lines) ]]; then
        ## Long sources use `less -RNS` (-R turns on support for ANSI colors, -N adds line numbers,
        ## and -S tells it to not wrap lines.)
        #local viewer="less -RNS"
    #else
        ## Short source files just use `cat -n`. The `-n` option turns on line numbers.
        #local viewer="cat -n"
    #fi

    #if type -t pygmentize >/dev/null; then
        #pygmentize $pygments_opts "$source_file" | $viewer
    #else
        #$viewer "$source_file"
    #fi
#}


# `mkcd`: runs `mkdir` with the given arguments, then `cd`s to the newly-created directory
mkcd() {
    local newdir="$@"
    mkdir "$newdir" && cd "$newdir"
}
