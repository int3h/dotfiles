#!/usr/bin/env bash

# This file defines new Bash commands that are too complicated to be aliases, but too simple to get
# their own script file in ~/bin. These commands are defined as functions, and this file is sourced
# in ~/.bash_profile so that these functions are available globally in Bash.


# Make a directory and immediately cd to it
mkcd() {
    mkdir -p -v "$@" && cd "$@"
}


# Search for files in <path> (defaults to '.') whose filename includes <name>
# Usage: findfiles <name> [<path>]
findfiles() {
    if [[ $# -gt 1 ]]; then
        local search_path=$2
    else
        local search_path='.'
    fi
    find $search_path -iname "*$1*"
}


# Make a tmp directory, switch to it and copy its name to the system's paste buffer
delme () {
    local TMPDIR="$(mktemp -d -t delme)"
    cd "$TMPDIR"
    [[ "$OS" == "Mac" ]] && pwd | tr -d "\n" | pbcopy
}



# Check the spelling of a word with aspell (if installed)
if type -t aspell>/dev/null; then
	spell() {
		echo "$@" | aspell pipe | grep -v 'but really Aspell'
	}
fi


# Grep for a process name and show the results
psgrep() {
	search_term="$*"
	procs="$(command ps -Aww -o pid,user,command)"
	echo "$procs" | head -n 1
	echo "$procs" | grep -i "[${search_term:0:1}]${search_term:1}"
}


# Takes in a PATH-like argument (defaults to $PATH itself if no arguments are given), removes
# duplicate entries, and prints it (still in PATH-like format) to stdout. The path components are
# kept in original order. If a component is duplicated, it is ordered according to its first
# occurrence.
normalize_path() {
    local to_norm="$PATH"
    [[ $# > 0 ]] && to_norm="$1"
    printf '%s' "$to_norm" | sed -e 's/:$/:TRAILINGNULL/' | awk 'BEGIN { RS=":"; } {n[$0]++; if(NR > 1) { printf(":"); } printf("%s", $0); }' | sed -e 's/:TRAILINGNULL$/:/'
}


# `xssh`: shortcut for `ssh -O exit`, to quickly close a shared master SSH connection
xssh() {
    if ssh -O check $* 2>/dev/null >/dev/null; then
        ssh -O exit $*
    fi
}
# Enable standard `ssh` bash command competions for `sshe`
[[ -f /usr/local/share/bash-completion/completions/ssh ]] && \
    source /usr/local/share/bash-completion/completions/ssh && \
    complete -F _ssh xssh


if [[ "$OS" == "Mac" ]] && [[ -f ~/.config/bash/shell_commands.mac ]]; then
    source ~/.config/bash/shell_commands.mac
fi
