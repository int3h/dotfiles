@import (reference) "syntax-variables";
// Default value if not defined
@ui-fg: @syntax-text-color;
@ui-theme-name: unknown;
@import (reference) "ui-variables";

// Hack to allow us to bypass the `:extend` command (LESS won't extend selector variables)
@plain-text-editor: atom-text-editor;
// Convenience to save us from having to add a `atom-text-editor::shadow` selector for editors
// atom-text-editor::shadow:extend(atom-text-editor all) {}





////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ##    ##  #######  ######## ########  ######
//    ###   ## ##     ##    ##    ##       ##    ##
//    ####  ## ##     ##    ##    ##       ##
//    ## ## ## ##     ##    ##    ######    ######
//    ##  #### ##     ##    ##    ##             ##
//    ##   ### ##     ##    ##    ##       ##    ##
//    ##    ##  #######     ##    ########  ######
//
////////////////////////////////////////////////////////////////////////////////////////////////////

/**********
==> Atom v1.13.0+ and Editor Styling

Atom v1.13.0 removed the shadow DOM from editors, which means that global page styles can now effect
the styles in editor elements. This means that we sometimes have to fight with some ancestory style
rule when trying to style the editor.

Since `!important` can have unintended side-effects, the way to 'win' the fight and have our rules
applied is to have a selector with greater specificity than the selector we're trying to override
(CSS semantics state that the rule with higher specificity takes precedence over lower specificity).

A cheap way to increase specificity is to just repeat a selector multiple times. So
`atom-text-editor .text` becomes `atom-text-editor .text.text`. Or, `atom-text-editor[mini]` becomes
`atom-text-editor[mini][mini]`. This doesn't change the selector's meaning, it just increases
specificity harmlessly.

See: http://flight-manual.atom.io/shadow-dom/sections/removing-shadow-dom-styles/#i-followed-the-guide-but-now-my-styling-is-broken

**********/


/**********
==> Section Dividers

The oversized ASCII section header comments in this file help make the section name visible in the
minimap, so I can easily scroll to the right section. They are generated via the `figlet` package,
using the "Banner3" style.

Copy and paste the following template, replacing "Heading Name" with your heading name:

////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    Heading Name
//
////////////////////////////////////////////////////////////////////////////////////////////////////

Then select the entire line with the heading name (and only that line), then use the command pallet
to activate the `Figlet: Convert` command, and select "Banner3" as the style.

**********/


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ######## ##     ## ######## ##     ## ########  ######
//       ##    ##     ## ##       ###   ### ##       ##    ##
//       ##    ##     ## ##       #### #### ##       ##
//       ##    ######### ######   ## ### ## ######    ######
//       ##    ##     ## ##       ##     ## ##             ##
//       ##    ##     ## ##       ##     ## ##       ##    ##
//       ##    ##     ## ######## ##     ## ########  ######
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.chalk-dark-tweaks() when (@syntax-background-color = #151515) {
  // Lighten up the text color of comments
  atom-text-editor {
    .comment,
    .punctuation.definition.comment {
      color: rgba(150, 150, 150, 70%);
    }
  }
}
// .chalk-dark-tweaks();


.polaris-syntax-theme-tweaks() when (@syntax-wrap-guide-color = #282a2e) and (@syntax-background-color = #262c31) {
  atom-text-editor, :host {
    .wrap-guide {
      background-color: darken(@syntax-background-color, 4%); //@syntax-indent-guide-color;
    }

    // // For all classes Polaris makes bold, turn off subpixel antialiasing (bold + subpixel AA looks
    // // too heavy/blurry, even on non-Retina screens.)
    // .punctuation.definition.bold,
    // .entity.name.function,
    // .entity.name.class,
    // .entity.name.type.class,
    // .markup.bold {
    //   -webkit-font-smoothing: antialiased !important;
    // }
  }

  atom-text-editor.is-focused, atom-text-editor.is-focused {
    .line.cursor-line {
      background-color: @syntax-gutter-background-color-selected;

      .indent-guide {
        color: @syntax-background-color;
      }
    }
  }
}
// .polaris-syntax-theme-tweaks();


// .gruvbox-tweaks() when (@syntax-text-color = rgba(235, 219, 178, 0.5)) {
.gruvbox-tweaks() {
  // Gruvbox uses yellow for editor text, which is unreadable in UI text boxes w/ a light UI theme
  atom-text-editor .text {
    color: @ui-fg !important; // Use the UI theme's foreground color, not syntax theme's
    text-decoration: line-through;
  }

  div.settings-view atom-text-editor[mini] {
    .text .source, .string.unquoted.heredoc, .source .source {
      color: @ui-fg !important;
    }
  }
}
// .gruvbox-tweaks();


.robin-hood-tweaks() when (@syntax-wrap-guide-color = #fabd2f) {
  atom-text-editor atom-text-editor-minimap {
    border-left: 3px solid fadeout(@syntax-wrap-guide-color, 60%) !important;
  }
}
// .robin-hood-tweaks();


.isotope-tweaks() {
  html, body { font-size: 14px; }
  .tree-view { font-size: 12px; }
}
// .isotope-tweaks();


.genisis-tweaks() {
  @tab-height: 40px;

  .tab-bar .tab {
    font-size: 12px;
  }

  @import "../../../../../.atom/packages/genesis-ui/styles/tabs";
}
// .genisis-tweaks();


.flatwhite-tweaks() {
    atom-text-editor {
        .source.embedded {
            background-color: @syntax-background-color;
        }
    }
}
// .flatwhite-tweaks();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ##       #### ##    ## ########     ######   #######  ##        #######  ########
//    ##        ##  ###   ## ##          ##    ## ##     ## ##       ##     ## ##     ##
//    ##        ##  ####  ## ##          ##       ##     ## ##       ##     ## ##     ##
//    ##        ##  ## ## ## ######      ##       ##     ## ##       ##     ## ########
//    ##        ##  ##  #### ##          ##       ##     ## ##       ##     ## ##   ##
//    ##        ##  ##   ### ##          ##    ## ##     ## ##       ##     ## ##    ##
//    ######## #### ##    ## ########     ######   #######  ########  #######  ##     ##
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.highlight-line-tweaks() {
  // Need the `.editor` selector to increase specificity, so that the rule is strong enough to
  // override the default higihglight-line package's selector.
  // See: http://flight-manual.atom.io/shadow-dom/sections/removing-shadow-dom-styles/#i-followed-the-guide-but-now-my-styling-is-broken
  atom-text-editor.editor .line.highlight-line {
    background-color: @syntax-gutter-background-color-selected !important;
  }
}
.highlight-line-tweaks();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ########    ###    ########     ########     ###    ########
//       ##      ## ##   ##     ##    ##     ##   ## ##   ##     ##
//       ##     ##   ##  ##     ##    ##     ##  ##   ##  ##     ##
//       ##    ##     ## ########     ########  ##     ## ########
//       ##    ######### ##     ##    ##     ## ######### ##   ##
//       ##    ##     ## ##     ##    ##     ## ##     ## ##    ##
//       ##    ##     ## ########     ########  ##     ## ##     ##
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.tab-bar-tweaks() when (@ui-theme-name = one-light-ui) {
  // Put a dividing line at the right side of the last tab, to separate it from the empty tab bar
  .tab-bar li.tab:last-of-type,
  .tab-bar .tab.active + li.tab:last-of-type {
      border-width: 0 1px 0 1px;
      border-image: linear-gradient(#d1d4dc, #babfca 1em) 0 1 0 1 stretch;
  }
}
// .tab-bar-tweaks();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ######## ########  ######## ########    ##     ## #### ######## ##      ##
//       ##    ##     ## ##       ##          ##     ##  ##  ##       ##  ##  ##
//       ##    ##     ## ##       ##          ##     ##  ##  ##       ##  ##  ##
//       ##    ########  ######   ######      ##     ##  ##  ######   ##  ##  ##
//       ##    ##   ##   ##       ##           ##   ##   ##  ##       ##  ##  ##
//       ##    ##    ##  ##       ##            ## ##    ##  ##       ##  ##  ##
//       ##    ##     ## ######## ########       ###    #### ########  ###  ###
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.tree-view-tweaks() {
  .tree-view {
    // background: lighten(@base-background-color, 0%);
    // border-right: 1px solid @pane-item-border-color;

    // Make the selected file's background darker than usual
    // .selected:before {
    //   background: darken(@base-background-color, 8%); //hsla(@ui-hue, @ui-saturation, 50%, .25);
    // }

    // Make the tree view list slightly more compact (default line-height is 24px/~2.2em)
    .list-item { line-height: 2em !important; }

    // Make the top-level folder (project roots) more distinct
    & > li.project-root  {
      // Make project root's font size larger
      & > .header {
        font-size: 1.1em;
      }

      // Put a border + margin/padding before project root (skipping the first one)
      &:nth-child(1n+2) {
        margin-top: 0.5em;
        border-top: 1px solid darken(@base-background-color, 10%);
        padding-top: 0.5em;
      }
    }
  }
}
.tree-view-tweaks();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     ######  ########    ###    ######## ##     ##  ######     ########     ###    ########
//    ##    ##    ##      ## ##      ##    ##     ## ##    ##    ##     ##   ## ##   ##     ##
//    ##          ##     ##   ##     ##    ##     ## ##          ##     ##  ##   ##  ##     ##
//     ######     ##    ##     ##    ##    ##     ##  ######     ########  ##     ## ########
//          ##    ##    #########    ##    ##     ##       ##    ##     ## ######### ##   ##
//    ##    ##    ##    ##     ##    ##    ##     ## ##    ##    ##     ## ##     ## ##    ##
//     ######     ##    ##     ##    ##     #######   ######     ########  ##     ## ##     ##
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.status-bar-tweaks() {
  status-bar  {
    @sb-border-color: contrast(@tool-panel-background-color, darken(@base-border-color, 10%), lighten(@base-border-color, 10%));
    @sb-border-image: linear-gradient(@tool-panel-background-color, @sb-border-color 20%, @sb-border-color 80%, @tool-panel-background-color);

    // Add border between sidebar and status bar
    // border-left: 1px solid @sb-border-color;

    .status-bar-left {
      // Add border on the right of every block in the left status bar
      & > .inline-block,
      & > linter-bottom-container > .inline-block {
        margin-right: 1em;
        padding-right: 1em;

        border-width: 0 1px 0 0;
        border-image: @sb-border-image 0 1 0 0 stretch;
      }

      // Make the linter status be the last item on the left side, by floating everything else left  a
      & > div { float: left; }
    }

    .status-bar-right {
      // Add border on the left of every block in the right status bar
      & > .inline-block {
        padding-left: 1em;
        margin-left: 1em;

        border-width: 0 0 0 1px;
        border-image: @sb-border-image 0 0 0 1 stretch;
      }
    }

    // Fix bug where the middle button was rounded instead of the first+last
    linter-bottom-tab { border-radius: 0 0 0 0 !important; }
    linter-bottom-tab:first-of-type { border-radius: 4px 0 0 4px !important; }
    linter-bottom-tab:nth-of-type(1n+2) { border-radius: 0 4px 4px 0 !important; }
    // There's still a bug if the last tab (project tab) is hidden; the "file" tab then becomes the
    // last visible tab, but it has a square border because it's still only the second tab element.
  }

  // Give cursor position bar a min-width big enough for 3 digit lines & column, to cut down on the
  // status bar components moving around as the cursor position changes.
  .cursor-position {
    min-width: 12.5em;
    text-align: center;
  }
}
.status-bar-tweaks();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ##     ## #### ##    ## #### ##     ##    ###    ########
//    ###   ###  ##  ###   ##  ##  ###   ###   ## ##   ##     ##
//    #### ####  ##  ####  ##  ##  #### ####  ##   ##  ##     ##
//    ## ### ##  ##  ## ## ##  ##  ## ### ## ##     ## ########
//    ##     ##  ##  ##  ####  ##  ##     ## ######### ##
//    ##     ##  ##  ##   ###  ##  ##     ## ##     ## ##
//    ##     ## #### ##    ## #### ##     ## ##     ## ##
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.minimap-tweaks() {
  // For minimap, use slightly lighter/darker (whichever contrasts more) variant of editor bg
  @minimap-bgcolor: contrast(@syntax-background-color,
    darken(@syntax-background-color, 4%),
    lighten(@syntax-background-color, 4%));
  // Color of border on left-side of minimap (to separate it from the editor)
  @border-color: contrast(@syntax-background-color,
    darken(@syntax-wrap-guide-color, 10%),
    lighten(@syntax-wrap-guide-color, 10%));
  // Color used for background of "visible area" block & its borders
  @visible-area-color: rgba(146, 146, 146, 1.0);

  // Only apply the styles to editors with a minimap
  @{plain-text-editor}[with-minimap] {
    // Hide the editor's native scrollbar, so that we can use the minimap exclusively to scroll
    // .vertical-scrollbar { opacity: 0; width: 0; }

    atom-text-editor-minimap {
      // Set background to 1px border + chosen background color (specified via a linear gradient
      // background image so that it doesn't affect element size, as `border: 1px ...` would).
      background-image: linear-gradient(to right,
        @border-color, @border-color 1px,
        @minimap-bgcolor 1px, @minimap-bgcolor);
      // background-color: @minimap-bgcolor;

      // Give the "visible area" block top+bottom borders, and a more transparent bg
      & .minimap-visible-area::after {
        background-color: fadeout(@visible-area-color, 70%);
        border-top: 1px solid @visible-area-color;
        border-bottom: 1px solid @visible-area-color;
      }
    }

    // Tweak colors of minimap decorations
    // .minimap {
    //   // More subtle git diff highlights
    //   .line {
    //     .git-line-modified { background: fadeOut(@syntax-color-modified, 40%); }
    //     .git-line-added    { background: fadeOut(@syntax-color-added, 30%); }
    //     .git-line-removed  { background: fadeOut(@syntax-color-removed, 60%); }
    //   }
    //
    //   // More distinct current lint highlight
    //   .cursor-line {
    //     background: mix(@minimap-bgcolor, @syntax-cursor-color, 40%);
    //   }
    // }
  }
}
// .minimap-tweaks();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//       ###    ##     ## ########  #######   ######   #######  ##     ## ########  ##       ######## ######## ########
//      ## ##   ##     ##    ##    ##     ## ##    ## ##     ## ###   ### ##     ## ##       ##          ##    ##
//     ##   ##  ##     ##    ##    ##     ## ##       ##     ## #### #### ##     ## ##       ##          ##    ##
//    ##     ## ##     ##    ##    ##     ## ##       ##     ## ## ### ## ########  ##       ######      ##    ######
//    ######### ##     ##    ##    ##     ## ##       ##     ## ##     ## ##        ##       ##          ##    ##
//    ##     ## ##     ##    ##    ##     ## ##    ## ##     ## ##     ## ##        ##       ##          ##    ##
//    ##     ##  #######     ##     #######   ######   #######  ##     ## ##        ######## ########    ##    ########
//
////////////////////////////////////////////////////////////////////////////////////////////////////

autocomplete-suggestion-list {
  &.select-list.popover-list {
    .suggestion-description {
      padding-top: 7px;
      padding-bottom: 7px;
      border-top: 1px solid @base-border-color;
    }

    .suggestion-description-content {
      font-size: @font-size;
      color: fade(@text-color-subtle, 100%);
    }

    &.suggestion-list-scroller { }
  }

  .icon.snippet { color: darken(@syntax-color-snippet, 20%); }
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//       ###    ##    ## ######## ####    ###    ##       ####    ###     ######
//      ## ##   ###   ##    ##     ##    ## ##   ##        ##    ## ##   ##    ##
//     ##   ##  ####  ##    ##     ##   ##   ##  ##        ##   ##   ##  ##
//    ##     ## ## ## ##    ##     ##  ##     ## ##        ##  ##     ##  ######
//    ######### ##  ####    ##     ##  ######### ##        ##  #########       ##
//    ##     ## ##   ###    ##     ##  ##     ## ##        ##  ##     ## ##    ##
//    ##     ## ##    ##    ##    #### ##     ## ######## #### ##     ##  ######
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.antialiasing() {
  // On non-Retina displays, use subpixel antialiasing (makes text easy to read, but a bit "fat")
  atom-text-editor { -webkit-font-smoothing: subpixel-antialiased; }
  // .tab-bar .tab .title { -webkit-font-smoothing: antialiased; }

  // On Retina displays, use regular (non-subpixel) antialiasing (looks sharper, though thinner)
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      atom-text-editor { -webkit-font-smoothing: antialiased; }
      // .tab-bar .tab .title { -webkit-font-smoothing: antialiased; }
  }
}
// .antialiasing();


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ##          ###    ##    ##  ######   ##     ##    ###     ######   ########  ######
//    ##         ## ##   ###   ## ##    ##  ##     ##   ## ##   ##    ##  ##       ##    ##
//    ##        ##   ##  ####  ## ##        ##     ##  ##   ##  ##        ##       ##
//    ##       ##     ## ## ## ## ##   #### ##     ## ##     ## ##   #### ######    ######
//    ##       ######### ##  #### ##    ##  ##     ## ######### ##    ##  ##             ##
//    ##       ##     ## ##   ### ##    ##  ##     ## ##     ## ##    ##  ##       ##    ##
//    ######## ##     ## ##    ##  ######    #######  ##     ##  ######   ########  ######
//
////////////////////////////////////////////////////////////////////////////////////////////////////

.language-markdown-tweaks() {
  atom-text-editor .text.md {
    .list {
      & { color: @syntax-text-color; }
      & > .punctuation { color: #b57b91; }
    }

    .destination.link, .underline.link {
      color: hsl(286, 60%, 67%);
    }

    .heading {
      font-weight: bold;

      @heading-color: hsl(207, 82%, 66%);
      & > .heading-1 { color: mix(@heading-color, @syntax-text-color, 100%); }
      & > .heading-2 { color: mix(@heading-color, @syntax-text-color, 85%); }
      & > .heading-3 { color: mix(@heading-color, @syntax-text-color, 70%); }
      & > .heading-4 { color: mix(@heading-color, @syntax-text-color, 55%); }
      & > .heading-5 { color: mix(@heading-color, @syntax-text-color, 40%); }
      & > .heading-6 { color: mix(@heading-color, @syntax-text-color, 35%); }
    }
  }
}
.language-markdown-tweaks();


.language-git-commit-tweaks() {
  // Disable angry, red highlighting of Git commit message lines that are "too long". This is the
  // future, we have soft wrapping. I can type as much as I want, and my computer always shows lines
  // at a nice width. If your PDP-11 can't do that, I shouldn't be responsible for doing it for you.
  // (And even if I wanted to, Atom doesn't support automatically hard wrapping text, and there's no
  // way I'm manually doing that.) If I'm forced to, I'll just use a Git commit message filter.

  // Don't turn off the angry, red text on the first line, since that's used as the commit summary,
  // and should still be kept short so that you can skim logs, with one line per commit.
  atom-text-editor .line:not([data-screen-row="0"]) .text.git-commit {
    .invalid.illegal.line-too-long {
      // This removes colors set by grammar scopes. Text will then use the editor's default colors.
      background-color: inherit;
      color: inherit;
    }
  }
}
.language-git-commit-tweaks();



.native-ui-revert() {
  .command-palette .editor.mini.mini {
    border: none;
    background-color: transparent;
    height: 150px;
    // box-shadow: none !important;
  }

  .tab-bar.tab-bar {
    background: darken(#fff, 30%); // darken(#fff, 17%);
    // border-bottom: 1px solid #999799;
    // height: 24px;
    // box-shadow: none;

    // .tab {
    //   // box-shadow: none;
    //
    //   &:first-child,
    //   &.active:first-child,
    //   &:last-child {
    //     box-shadow: none;
    //   }
    // }

    .tab.active {
      // box-shadow: none;
      background: darken(#fff, 17%);
    }
  }

  .project-root .project-root-header .icon-repo:before {
    display: inline-block;
  }
}
.native-ui-revert();
