#!/usr/bin/env bash

# This file defines new Bash commands that are too complicated to be aliases, but too simple to get 
# their own script file in ~/bin. These commands are defined as functions, and this file is sourced 
# in ~/.bash_profile so that these functions are available globally in Bash.

# Search for files in <path> (defaults to '.') whose filename includes <name>
# Usage: findfiles <name> [<path>]
findfiles() {
    if [[ $# -gt 1 ]]; then
        local search_path=$2
    else
        local search_path='.'
    fi
    find $search_path -iname "*$1*"
}


# Open a man page as a PDF in Preview.app
pman () {
    man -t $@ | open -f -a /Applications/Preview.app
}


# Make a tmp directory, switch to it and copy its name to the system's paste buffer
delme () {
    local TMPDIR="$(mktemp -d -t delme)"
    cd "$TMPDIR"
    pwd | tr -d "\n" | pbcopy
}


# Commands to display OS X notifications from the terminal
if hash terminal-notifier 2>/dev/null; then
    alias notify-success='terminal-notifier -sound Glass -sender com.apple.Terminal -activate com.apple.Terminal -title "Succeeded" -message'
    alias notify-failure='terminal-notifier -sound Basso -sender com.apple.Terminal -activate com.apple.Terminal -title "Failed" -message'
else
    alias notify-success='say'
    alias notify-failure='say'
fi
notify () {
    if [[ ! "$@" ]]; then
        echo "Usage: notify <command>" >&2
        echo "Executes <command> and shows an OS X notification on success or failure" >&2
        return 1
    fi

    local SEARCH=' '
    local REPLACE='%20'
    local CMDMSG="${@//$SEARCH/$REPLACE}"
    (eval "$@" && notify-success "Command '$CMDMSG' completed successfully") || notify-failure "Command '$CMDMSG' failed"
}
