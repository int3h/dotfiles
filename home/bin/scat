#!/usr/bin/env bash

# `scat`: view a file with syntax highlighting.
#
# Requires Pygments and jq (optional) to work.
#   OS X:  pip install -I --force-reinstall pygments && pip install mistune && brew install jq
#   Linux: sudo apt-get install python-pygments jq


# Input file
source_file=""
# Options to pass to pygmentize (set to sane defaults if user doesn't provide any themself)
pyg_opts=""

################################################################################
# Parse arguments
################################################################################

while [[ $# -gt 0 ]]; do
    case "$1" in
        -g | -s)
            pyg_opts="$pyg_opts $1"
            shift
            ;;
        -l | -F | -f | -O | -P | -S | -a)
            if [[ $# -gt 1 ]]; then
                pyg_opts="$pyg_opts $1 $2"
                shift 2
            else
                # Ignore the option
                shift
            fi
            ;;
        -h | --help)
            echo '`cat` with syntax highlighting via pygments'
            echo 'Usage: scat [<pygmentize option>...] [<input file>]'
            echo
            echo 'Requires pygments to be installed for syntax highlighting. Otherwise falls back'
            echo 'to plain old `cat`. If `jq` is installed and <input file> end in "*.json", will'
            echo 'use `jq` for highlighting instead of pygments.'
            echo
            echo 'If <input file> is given, read that file, highlight it, and output to screen. If'
            echo '<input file> is not given, or is "-", read input from stdin.'
            echo
            echo '<pygmentize option> is an optional list of options to pass to pygments. If none'
            echo 'are given, uses default of "-P style=native -f terminal256 -g".'
            exit 0
            ;;
        *)
            source_file="$@"
            break
            ;;
    esac
done

# If the user didn't pass any options to pygmentize, use good defaults: native color scheme, 256
# colors, and guess input syntax.
if [[ "$pyg_opts" == "" ]]; then
    pyg_opts="-P style=native -f terminal256 -g"
fi


################################################################################
# Helper functions
################################################################################

# Get the command to use to syntax highlight the input
get_parser() {
    local infile="$@"

    # Use `jq` for JSON file, `pygmentize` if it's installed, or `cat` if we have to.
    if [[ "$infile" == *.json ]] && type -t jq >/dev/null; then
        echo 'jq -C .'
    elif type -t pygmentize >/dev/null; then
        echo "pygmentize $pyg_opts"
    else
        echo 'cat'
    fi
}


# Get the command to use to display the output
get_viewer() {
    local infile="$@"

    # If the input is stdin, or the input file is longer than will fit in a single terminal screen,
    # use `less` as the viewer; otherwise, use `cat`.
    if [[ "$infile" == "" ]] || [[ "$infile" == "-" ]] || \
            [[ $(wc -l "$infile" | awk '{print $1}') -gt $(tput lines) ]]; then
        echo 'less -RNS'
    else
        echo 'cat -n'
    fi
}


################################################################################
# Main Action
################################################################################

parser="$(get_parser "$source_file")"
viewer="$(get_viewer "$source_file")"

if [[ "$source_file" == "" ]] || [[ "$source_file" == "-" ]]; then
    $parser <&0 | $viewer
else
    $parser "$source_file" | $viewer
fi
