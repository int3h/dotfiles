#!/usr/bin/env bash

. ~/bin/helpers.sh

# This script provides a wrapper around homebrew's `brew` command, allowing much the same function
# as bash aliases would in non-monolithic apps (add new commands, modify existing commands, etc.)
# Because all of homebrew's commands are processed with the `brew` binary, bash's aliases can't
# modify individual commands. This fixes that.

# TODO: Modify the `brew` command's Bash autocompletion to reflect the below changes.

prime=$(which brew)

case $1 in
	# Modified to automatically run the output through GraphViz and save the resulting PDF to the
	# desktop (previously, would just output a GraphViz source file to stdout.)
	graph)
		if [[ $2 == -h || $2 == --help ]]; then
			echo "Usage: brew graph [<Out File>]" >&2
			echo "Draw a graph of installed formula and their dependencies and save it as a PDF." >&2
			echo >&2
			echo "If <Out File> is specified, then the PDF is written to that file. Otherwise, it" >&2
			echo "is written to ~/Desktop/brew.pdf." >&2
			exit 0
		fi
		outfile=${2:-$(unique_filename ~/Desktop/brew.pdf)}
		echo "Writing graph to '$outfile'"

		messages=$($prime graph | dot -Tpdf -o${outfile} 2>&1)
		if [[ $messages ]]; then
			echo "Errors or warnings occured during graph generation. Not opening PDF." >&2
			echo "Output:" >&2
			echo >&2
			echo "$messages" >&2
		else
			open "$outfile"
		fi
	;;

	# Defaults to linking apps to ~/Applications (previously, the default was /Applications)
	linkapps)
		$prime linkapps --local
	;;

	# A command to try to get rid of all of the files brew no longer needs (plus do a linkapps.)
	clean)
		cleanopts=''
		[[ "$1" == "--force" ]] && cleanopts="--force"
		$prime cleanup -s $cleanopts
		printf '\n'
		$prime prune
		printf '\n'
		# Commented-out because the -s option to clean should do the same thing, but more safely
		#trash "$(brew --cache)"
		# Unlink apps from the system directory, where they never should be
		$prime unlinkapps
		printf '\n'
		# Re-link all the live applications to the user directory
		$prime linkapps --local
	;;

	# This now will do a `brew update` right before doing an upgrade, so that you always have the
	# most up-to-date version
	upgrade)
		$prime update
		$prime $@
	;;

	# Ensures we have the latest updates before showing outdated formulae. So long as the output
	# is going to a terminal, it will also show the output of `update`, followed by a divider.
	# The '-f' or '--fast' option will skip running `update` altogether.
	outdated)
		if [[ $2 != -f && $2 != --fast ]]; then
			if [[ -t 1 ]]; then
				$prime update
				(type mark 2>&1 >/dev/null && mark) || printf '\n============\n\n'
			else
				$prime update >/dev/null
			fi
		fi
		$prime outdated
	;;

	# A command to shew any new formula since a given date (where date is any date format git
	# supports, like relative dates like "1 month ago" or absolute dates like "1/1/2013")
	new)
		if [[ $# != 2 || $2 == -h || $2 == --help ]]; then
			echo "	Usage: brew new <date>"
			wrap 'Shows new formula since <date> (where <date> is a Git date, like "1 week ago" or "1/1/2012")'
			echo
			exit
		fi

		formulas=""
		for repo in $(brew --repository)/Library/Taps/* $(brew --repository)/Library/Formula; do
			cd "${repo}"
			oldrev=$(git log --pretty='%H'	--since="$2" --reverse | head -n 1)
			currentrev=$(git rev-parse -q --verify HEAD)
			# By changing the '--diff-filter=' line to 'M' for modified or 'R' for removed, we can
			# control which files we get back. We can use this to create a more full-features
			# change report, if we wanted.
			formulas="$formulas$(git diff-tree --name-only -r -M85% --diff-filter=A --relative ${oldrev} ${currentrev} | grep -P -o '^[^.]+')\n"
		done
		echo -e "$formulas" | column
	;;

	# Any commands not modified or added above are passed to brew unmolested.
	*)
		$prime $@
	;;
esac
