#!/usr/bin/env bash


bin_name="$(basename "$0")"

print_help() {
    printf 'Usage: %s STRING PATH\n' "$bin_name" >&2
    printf '   or: %s -EXPRESSION... PATH\n' "$bin_name" >&2
    printf 'Use `find` to search PATH for STRING or EXPRESSIONs, using sane defaults.\n\n' >&2
    printf 'If the first argument starts with a "-", it will be used as a `find`-compatible\n' >&2
    printf 'search EXPRESSION (see `man 1 find`). Otherwise, will be used as a STRING to\n' >&2
    printf 'match against file names.\n\n' >&2
}


if [[ $# < 2 ]]; then
    printf 'Error: not enough arguments\n\n' >&2
    print_help
    exit 1
fi
if [[ $1 == '-h' ]] || [[ $1 == '--help' ]]; then
    print_help
    exit 0
fi


prune_expression=(\( \
    -path $HOME/Library/Mail -or \
    -path $HOME/Library/Calendars -or \
    -path /Volumes -or \
    -path /cores -or \
    -path /dev -or \
    -path "$HOME/Library/Application Support/Google/*" \( \
        -name "File System" -or \
        -name IndexedDB -or \
        -name Extensions -or \
        -name "Local Storage" -or \
        -name "Pepper Data" \
    \) \
\) -prune)


find_expression=''
while [[ $# > 1 ]]; do
    if [[ $# == 2 ]]; then
        if [[ "$1" == "-print" ]] || [[ "$1" == "-print0" ]] || [[ "$1" == "-ls" ]]; then
            action=''
        else
            action='-print'
        fi
    fi

    find_expression="${find_expression}$1 "
    shift
done

if [[ "$find_expression" != -* ]]; then
    find_expression="-iname $find_expression"
fi

search_path="${1%\/}"


command find $search_path "${prune_expression[@]}" -or $find_expression $action
