#!/usr/bin/env ruby

require 'fileutils'


module OS
    def self.mac?() (/darwin/ =~ RUBY_PLATFORM) != nil end
    def self.linux?() (/linux/ =~ RUBY_PLATFORM) != nil end
    def self.unknown?() !(OS.mac? || OS.linux?) end

    def OS.to_s
        return "Mac OS X" if OS.mac?
        return "Linux" if OS.linux?
        return "unknown OS (#{RUBY_PLATFORM})"
    end
end


class Say
  class << self
    def heading(msg) say_msg("#{bold}#{msg}", "#{@@heading_separator}==>", blue) end
    def action(msg) say_msg(msg, "✔", green) end
    def warning(msg) say_msg(msg, "!", yellow) end
    def error(msg) say_msg(msg, "✘", red) end

    private
    def say_msg(msg, sigil="", color="")
        puts "#{color}#{bold}#{sigil}#{reset} #{msg}#{reset}"
        @@heading_separator = "\n"
    end

    @@heading_separator = ""
    def blue() color 34 end
    def white()  color 39  end
    def red() color 31 end
    def yellow() color 33 end
    def green() color 32 end
    def gray() color 30 end
    def color(n) escape "#{n}" end
    def bold() escape "1" end
    def underline() escape "4" end
    def reset() escape 0 end
    def escape(n) "\033[#{n}m" if $stdout.tty? end
  end

end


class Configurator
    def do_config
        puts

        if OS.unknown?
            Say.error "Unknown OS '#{OS.to_s}. Not configuring.'"
            return 1
        end

        config_git
        config_home_dir
        # TODO: Install Janus
        # TODO: Run ~/.janus/update.sh to pull & compile my own Vim modules

        Say.heading "Configuration complete"
    end


    # Symlink the right system-specific gitconfig to ~/.gitsupport/gitconfig.active
    def config_git
        Say.heading "Configuring git"

        git_support_dir = "#{Dir.home}/.gitsupport"
        git_os_config_file = "gitconfig.mac" if OS.mac?
        git_os_config_file = "gitconfig.linux" if OS.linux?

        return Say.warning "Not symlinking #{OS.to_s} gitconfig because an active gitconfig already exists" if File.exist?("#{git_support_dir}/gitconfig.active")
        return Say.error "Could not find OS-specific Git config file at '#{git_support_dir}/#{git_os_config_file}'. Aborting git config." unless File.exist?("#{git_support_dir}/#{git_os_config_file}")

        Say.action "Symlinking #{OS.to_s} gitconfig as active gitconfig"
        FileUtils.ln_s git_os_config_file, "#{git_support_dir}/gitconfig.active"
    end


    def config_home_dir
        Say.heading "Configuring home directory"
        return unless OS.mac?

        Say.action "Setting ~/bin to hidden"
        `chflags hidden ~/bin`
    end
end


rc = Configurator.new()
rc.do_config
