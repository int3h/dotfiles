#!/usr/bin/env bash

# This file defines new Bash commands that are too complicated to be aliases, but too simple to get
# their own script file in ~/bin. These commands are defined as functions, and this file is sourced
# in ~/.bash_profile so that these functions are available globally in Bash.


# Make a directory and immediately cd to it
mkcd() {
    mkdir -p -v "$@" && cd "$@"
}


# Make a tmp directory, switch to it and copy its name to the system's paste buffer
delme () {
    local TMPDIR="$(mktemp -d -t delme)"
    cd "$TMPDIR"
    [[ "$OS" == "Mac" ]] && pwd | tr -d "\n" | pbcopy
}


# For a list of 0 or more npm modules, creates a temp directory, `npm install`s the modules in that
# directory, then opens Jupyter Notebook to the temp directory, so you can `require()` them.
if type -t npm >/dev/null && type -t jupyter >/dev/null; then
    trynpm() {
        local TMPDIR="$(mktemp -d -t delme)"
        cd "$TMPDIR"

        if [[ $# -gt 0 ]]; then
            npm install $@ || (printf '\n\nFatal error installing npm modules\n')
        fi

        jupyter notebook --notebook-dir="$(pwd)" --FileContentsManager.root_dir="$(pwd)" --NotebookApp.default_url='/tree'
    }
fi


# Check the spelling of a word with aspell (if installed)
if type -t aspell>/dev/null; then
	spell() {
		echo "$@" | aspell pipe | grep -v 'but really Aspell'
	}
fi


# Grep for a process name and show the results
psgrep() {
	search_term="$*"
	procs="$(command ps -Aww -o pid,user,command)"
	echo "$procs" | head -n 1
	echo "$procs" | grep -i "[${search_term:0:1}]${search_term:1}"
}


# `xssh`: shortcut for `ssh -O exit`, to quickly close a shared master SSH connection
sshq() {
    if ssh -O check $* 2>/dev/null >/dev/null; then
        ssh -O exit $*
    fi
}
# Enable standard `ssh` bash command competions for `sshe`
[[ -f /usr/local/share/bash-completion/completions/ssh ]] && \
    source /usr/local/share/bash-completion/completions/ssh && \
    complete -F _ssh sshq

bashrc() {
    local rc_editor="$VISUAL"
    # We usually add the -h option to mvim when used as $VISUAL. Edit files here w/ plain cmd.
    [[ "$VISUAL" == mvim* ]] && local rc_editor='mvim'

    if [[ "$OS" == "Mac" ]]; then
        local os_config="$_USER_CONFIG_PATH/mac"
    else
        local os_config="$_USER_CONFIG_PATH/linux"
    fi

    $rc_editor "$HOME/.bash_profile" \
        "$_USER_CONFIG_PATH/aliases" "$os_config/aliases" \
        "$_USER_CONFIG_PATH/commands" "$os_config/commands" \
        "$_USER_CONFIG_PATH/local" "$_USER_CONFIG_PATH/__init__.sh" \
        "$HOME/.bash_completion" "$HOME/.inputrc" "$HOME/.bashrc" "$HOME/.bash_logout"
}


# npm shortcuts
if type -t npm >/dev/null; then
    __npm_version() {
        if [[ $# < 1 ]]; then
            echo "Error: missing package name" >&2
            return 1
        fi
        npm view $@ dist-tags
    }
    alias 'npm-version'='__npm_version'

    if type -t jq >/dev/null; then
        __npm_brief() {
            if [[ $# < 1 ]]; then
                echo "Error: missing package name" >&2
                return 1
            fi
            npm view --json $@ | jq 'del(.["author", "bugs", "bundleDependencies", "contributors", "maintainers", "man", "users", "time", "versions", "readmeFilename", "repository", "keywords", "homepage", "license", "gitHead", "dist"]) | .dependencies=(.dependencies|keys|join(", ")) | .devDependencies=(.devDependencies|keys|join(", "))'
        }
        alias 'npm-brief'='__npm_brief'
    fi
fi


tssh() {
    ssh $@ -t 'tmux -CC new-session -A -s "$USER"'
}
if  [[ -f /usr/local/share/bash-completion/completions/ssh ]]; then
    source /usr/local/share/bash-completion/completions/ssh
    shopt -u hostcomplete && complete -F _ssh tssh
fi


# Command to remove a host from ~/.ssh/known_hosts
ssh-forget() {
    # `ssh-keygen -R` deletes a host from known_hosts, but you need to use the exact hostname with
    # port, which is annoying. SSH also will add hosts by IP automatically, meaning you can still
    # get a key ID mistmatch even if you delete the hostname fingerprint.
    #
    # This command works by first connecting to the host via SSH, using a new custom known_hosts
    # file path. We then scrape the hosts SSH saves to this file from that connection, and remove
    # each from the real known_hosts using `ssh-keygen`.

    local ssh_host="$@"
    local tmpfile="$(mktemp -t ssh_hosts_to_remove)"

    # If we have a SSH control connection running to the server, close it so SSH will reconnect
    ssh -q -O exit $ssh_host >/dev/null 2>/dev/null
    # Connect to the server and save the server key ID to a custom location
    ssh -q -o "StrictHostKeyChecking no" -o "UserKnownHostsFile $tmpfile" $ssh_host exit || return 1

    # Scrape the hosts from that custom known_hosts (splitting on ',' since each entry can have
    # multiple hostnames listed, separated by a ',') and delete using `ssh-keygen`.
    ssh-keygen -l -f $tmpfile | awk '{print $3}' | tr ',' "\n" | command xargs -I{} ssh-keygen -R '{}'

    command rm $tmpfile
}


# Wrapper for using grc with `pstree`.
# Normally, using `colourify` or `grcat` with `pstree` causes pstree to not be able to find the term
# width, and will output unwrapped lines. This wrapper runs `pstree`'s output through `cut` first,
# then `grcat`, and respects arguments to `pstree`.
if type -t pstree >/dev/null && type -t grcat >/dev/null; then
    _pstree() {
        command pstree -g 3 $@ | cut -c -$COLUMNS | grcat conf.pstree
    }
    alias pstree='_pstree'
fi

