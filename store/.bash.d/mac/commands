#!/usr/bin/env bash

# Open a man page as a PDF in Preview.app
pman () {
    man -t $@ | open -f -a /Applications/Preview.app
}


# If the man page is just a reference to "Bash built-in commands" man page, use `help` instead
man_or_help() {
    if [[ $# -lt 1 ]] || [[ -z $1 ]]; then
        printf 'What manual page or help topic do you want?\n' >&2
        return 1
    fi

    # Get the filename of the manfile
    local manfile="$(command man -w "$@" 2>&-)"
    if [[ $? != 0 ]] || [[ -z $manfile ]]; then
        printf 'No manual or help entry for %s\n' "$*"
        return 2
    fi

    # If the command is a Bash builtin, display `help` instead of a HTML manpage
    if [[ "$(basename "$manfile")" == 'builtin.1' ]]; then
        command help "$@"
    else
        command man "$@"
    fi
}
#alias man="man_or_help"


# Takes a search regex, and prints all the processes with open files whose path matches the regex
using() {
    local search_path='/Volumes'
    [[ $# -gt 0 ]] && search_path="$@"
    sudo lsof | awk -v path="$search_path" '{if($9 ~ path) print;}'
}


# This function is defined by OS X default `/etc/bashrc_Apple_Terminal`. However, there is a bug
# when `find` is GNU find. We redefine it here, and fix the bug by referencing OS X's built-in find.
shell_session_delete_expired() {
	if ([ ! -e "$SHELL_SESSION_TIMESTAMP_FILE" ] || [ -z $(/usr/bin/find "$SHELL_SESSION_TIMESTAMP_FILE" -mtime -1d) ]); then
	    local expiration_lock_file="$SHELL_SESSION_DIR/_expiration_lockfile"
	    if shlock -f "$expiration_lock_file" -p $$; then
		echo -n 'Deleting expired sessions...'
		local delete_count=$(/usr/bin/find "$SHELL_SESSION_DIR" -type f -mtime +2w -print -delete | wc -l)
		[ "$delete_count" -gt 0 ] && echo $delete_count' completed.' || echo 'none found.'
		touch "$SHELL_SESSION_TIMESTAMP_FILE"
		rm "$expiration_lock_file"
	    fi
	fi
}

# vim: set tabstop=4 shiftwidth=4 textwidth=100 expandtab foldmethod=manual filetype=sh:
