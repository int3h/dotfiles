#!/usr/bin/env bash

foreground_code="X"
foreground_text="X"

background_code="X"
background_text="X"

bold="X"
bold_text="X"

example_text="$(printf '%s (%s)$' "$USER" "${PWD/#$HOME/'~'}")"

#color_charwidth=12
#colors_per_line="$(( $(tput cols) / $color_charwidth ))"
colors_per_line=6

reset="$(tput sgr0)"


select_bold() {
    local bold_answer=''
    local question="$(printf 'Make text %sbold%s (y/n)?: ' "$(tput bold)" "$reset")"

    while [[ "$bold" == "X" ]]; do
        read -n 1 -p "$question" bold_answer

        if [[ "$bold_answer" == "y" ]] || [[ "$bold_answer" == "Y" ]]; then
            bold="$(tput bold)"
            bold_text='$(tput bold)'
        elif [[ -z "$bold_answer" ]]; then
            printf 'Defaulting to bold text\n'

            bold="$(tput bold)"
            bold_text='$(tput bold)'
        elif [[ "$bold_answer" == "n" ]] || [[ "$bold_answer" == "N" ]]; then
            bold=''
            bold_text=''
        else
            printf '\nError: "%s" is not a valid answer. Please enter "y" or "n".\n\n'
        fi
    done

    printf '\n\n'
}

# We use the raw shell escape codes below to set color because `tput` is too slow
select_bg() {
    # Print the default background
    printf '%s %10s %s' "$bold" '-' "$reset"

    # Print all the backgrounds
    for color in {0..256} ; do
        printf '%s\e[48;5;%sm %10s %s' "$bold" $color $color "$reset"

        if [[ $color -lt 15 ]]; then
            if [[ $(( ($color + 2) % $colors_per_line )) == 0 ]]; then
                printf '\n'
            fi
        elif [[ $color -eq 15 ]]; then
            printf '\n\n'
        else
            [[ $(( $color % $colors_per_line )) == 3 ]] && printf '\n'
        fi
    done
    printf '\n\n'

    local selected_bg=''
    local code_prompt="$(printf '%sSelect a background color:%s ' "$(tput bold)" "$reset")"
    while [[ "$background_code" == "X" ]]; do
        read -p "$code_prompt" selected_bg

        if [[ -z $selected_bg ]] || [[ $selected_bg == '-' ]]; then
            background_code=""
            background_text=''

        elif [[ $selected_bg =~ ^[0-9]+$ ]] && [[ $selected_bg -ge 0 ]] && [[ $selected_bg -lt 256 ]]; then
            background_code="$(tput setab $selected_bg)"
            background_text="\$(tput setab $selected_bg)"

        else
            printf 'Error: selection "%s" is not a valid color value.\n\n' "$selected_bg"
        fi
    done

    printf '\n\n'
}

select_fg() {
    # Print the default foreground
    printf '%s %10s %s' "${bold}${background_code}" '-' "$reset"

    # Print all the foreground
    for color in {0..256} ; do
        printf '%s\e[38;5;%sm %10s %s' "${bold}${background_code}" $color $color "$reset"

        if [[ $color -lt 15 ]]; then
            if [[ $(( ($color + 2) % $colors_per_line )) == 0 ]]; then
                printf '\n'
            fi
        elif [[ $color -eq 15 ]]; then
            printf '\n\n'
        else
            [[ $(( $color % $colors_per_line )) == 3 ]] && printf '\n'
        fi
    done
    printf '\n\n'

    local selected_fg=''
    local code_prompt="$(printf '%sSelect a foreground color:%s ' "$(tput bold)" "$reset")"
    while [[ "$foreground_code" == "X" ]]; do
        read -p "$code_prompt" selected_fg

        if [[ -z $selected_fg ]] || [[ $selected_fg == '-' ]]; then
            foreground_code=""
            foreground_text=''

        elif [[ $selected_fg =~ ^[0-9]+$ ]] && [[ $selected_fg -ge 0 ]] && [[ $selected_fg -lt 256 ]]; then
            foreground_code="$(tput setaf $selected_fg)"
            foreground_text="\$(tput setaf $selected_fg)"

        else
            printf 'Error: selection "%s" is not a valid color value.\n\n' "$selected_fg"
        fi
    done
}


show_results() {
    printf '\n\n%sExample Prompt%s\n' "$(tput smul)$(tput bold)" "$reset"
    printf '%s%s%s \n\n' "${bold}${background_code}${foreground_code}" "$example_text" "$reset"

    local interactive_prompt="$(printf '%sInteractive Example (try typing something)%s\n%s' \
        "$(tput bold)$(tput smul)" "$reset" "${bold}${background_code}${foreground_code}" \
    )"
    read -p "$interactive_prompt" ignore_input
    printf '%s\n' "$reset$(tput el)$(tput el1)"

    printf '%sColor Command%s\n%s%s%s\n\n' "$(tput bold)$(tput smul)" "$reset" "$bold_text" "$background_text" "$foreground_text"
}


select_bold
select_bg
select_fg

show_results
