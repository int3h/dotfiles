""""""" General options {{{1

set t_Co=256
colorscheme jellybeans+

set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab

" Put in a highlight after column 100
set colorcolumn=101
set tw=100
" c = autowrap comments to textwidth
" r = auto-insert comment leader after hitting <Enter> in insert mode
" o = auto-insert comment leader after hitting o or O in normal mode
" q = allow formatting of comments with 'gq'
" l = if line is >tw when insert mode statteed, don't autoformat
" w = trailing whitespace indicates paragraph continues on next line
" 1 = dont break line after 1-letter word
" j = remove comment leader when joining lines, where it makes sense
set formatoptions+=croqal1jw
set formatoptions-=t
set formatoptions-=2

" Highlight the line the cursor is on
set cursorline

" New splits open to the right, or bottom
set splitright
set splitbelow

" Show (partial) command in last line of screen. No idea what it does.
set showcmd

" Don't put "--INSERT--" in command bar when going into insert mode
set noshowmode

" Don't ignore *.out files (as is the Janus default)
set wildignore-=*.out
" Do ignore *.tmp files
set wildignore+=*.tmp

set number

set hidden


""""""" Startup commands {{{1

" If more than one file is passed to Vim on startup, open each in its own tab
function! Open_all_files_in_tabs()
	if len(argv()) > 1
		" Allow up to 20 tabs to be created at startup (more will split the last tab)
		set tabpagemax=20
		" Save the current tab
		let l:currentTab = tabpagenr()
		" `tab`: run the following command and create tabs when it
		" creates windows
		" `sball`: create a window for each buffer
		execute "tab sball"
		" Restore the original tab we opened
		execute 'tabnext' l:currentTab
	endif
endfunction


augroup VimrcStartup
		" 'nested' allows autocmds that run on opening a buffer (such as
		" detecting " filetype) run. Otherwise, all further autocmds prevented
		" from running.
		autocmd VimEnter * nested call Open_all_files_in_tabs()
augroup end


""""""" New commands & shortcuts {{{1

" Mappings {{{2

" Map "Home" and "End" to go to the top/bottom of the file, as expected
nmap <Home> gg
vmap <Home> gg
nmap <End> G
vmap <End> G


" Open a new tab with Cmd-T (remaps Janus' mapping of Ctrl-T to :CtrlP
map <D-t> :tabnew <CR>
imap <D-t> <ESC>:tabnew<CR>

" Split a line with Ctrl+C (for when Vim won't insert a line break because of auto-formatting.)
" Disabled at the momement, because it's buggy
"imap <C-c> <CR><Esc>O


" `:VimRC[!]` : Opens all vimrc in separate tabs. If ! is present, will open
" the tabs in the current Vim instance. Otherwise, runs a new MacVim instance
" with the tabs open on startup.
command -bang VimRC call VimEditRC("<bang>")

" <leader>db : Delete buffers not currently loaded in a window
nmap <leader>db :call BufDeleteInvisible()<CR>

" <leader>ml : Append modeline after last line in buffe
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" TODO: Create some way (an imap for D-<CR>, maybe?) that inserts a newline nomatter what;
" specifically, if the 'a' formatoption is set.
"
" Normally, with 'a' in 'formatoptions', Vim will automatically format your text as you type. If two
" lines aren't separated by a blank line/empty comment line, then Vim will consider them part of the
" same paragraph and try to concatenate them. In practice, this means that trying to hit 'enter'
" inside a comment (or other autoformatted text) has no effect, because Vim inserts the newline,
" immediately sees the two lines without a blank line between them, and combines them together
" again. This makes it seem like the 'enter' never happened.
"
" We can default to 'a' off, but then if we modify some text, we have to manually reformat it with
" 'gq' (though as we're typing the text for the first time, the text will be wrapped and formatted
" correct; it's only if we modify existing text.) I really like the autoformatting, so this is
" undersirable.
"
" We could also map D-<CR> to "disable 'a', press enter twice, enable 'a'". However, the new line
" won't be formatted (and often will be only a half line wide.) We could use 'gq' to format it, but
" I don't know how many lines to include in the block of text we reformat (it needs to be the entire
" paragraph.) If we could tell Vim to autoformat the line as it does when we insert text, that may
" work, but I don't know of a reliable way to trigger that.
"
" Maybe we can just use the Vim script API to insert two new lines? Will that bypass the immediate
" autoformat concatenating, but still insert the comment leaders?

nmap <leader>a :call ToggleFormatAll()<CR>

" Unmap 'Q' entering 'ex' mode (built-in binding, but nobody uses ex mode, seriously)
nmap <silent> Q <Nop>


" Functions supporting the above commands {{{2

" TODO: Can we make some of these local to this script, instead of polluting the global namespace?
" Adding 's:' to their names gives the error "Using <SID> not in a script context".


function VimEditRC(bBang)
	if a:bBang == "!"
		" If the command is proceeded by a '!', create new tabs directly in
		" this instance of Vim with the vimrc files.

		" If the current buffer is empty (only has one buffer, that buffer has
		" a blank filename, is one line long, and that line has no content),
		" load the first file into the current tab.
		if len(tabpagebuflist()) == 1 && bufname("%") == "" && line('$') == 1 && getline(1) == ''
			exec "e ~/.vimrc.before"
		else
			exec "tabedit ~/.vimrc.before"
		endif
		exec "tabedit ~/.vimrc.after"
		let l:vimrcafter = tabpagenr()
		exec "tabedit ~/.gvimrc.before"
		exec "tabedit ~/.gvimrc.after"
		exec "tabnext " . l:vimrcafter
	else
		" If the command is not proceeded by a '!', open a new MacVim instance
		" and execute commands
		" to load the vimrc files into tabs on startup.
		exec "silent !mvim -c 'edit ~/.vimrc.before' -c 'tabedit ~/.vimrc.after' -c 'tabedit ~/.gvimrc.before' -c 'tabedit ~/.gvimrc.after' -c 'tabnext 2'"
	endif
endfunction

function! BufDeleteInvisible()
	" For each tab page, finds the visible buffers and sets the appropriate
	" key
	" in the dictionary.
	let l:visiblebufs = {}
	for i in range(1, tabpagenr('$'))
		for b in tabpagebuflist(i)
			let l:visiblebufs[b] = 1
		endfor
	endfor

	" Keeps tracks of the buffers we delete so we can show the user a message
	" about what we did when we're done.
	let l:closed = []
	" Iterates through each possible buffer number. If that buffer is in the
	" buffer list, but not marked as visible in our dictionary, delete it.
	for b in range(1, bufnr('$'))
		if buflisted(b) && !has_key(l:visiblebufs, b)
			call extend(l:closed, [bufname(b)])
			exe 'bdelete ' . b
		endif
	endfor

	if len(l:closed) < 1
		echon "No buffers deleted"
	"elseif len(l:closed) == 1
		"echon "Deleted buffer " . l:closed[0]
	else
		"echon "Deleted " . len(l:closed) . " buffers: " . join(l:closed, ',')
		echon "Deleted " . join(l:closed, ', ')
	endif
	"echon "Deleted " . len(l:closed) . " buffer" . (len(l:closed) == 1 ? '' : 's')
endfunction


" Checks the file for possible modelines and returns the line number of the
" first match. If no modeline is found, returns -1
function GetModelineNumber()
	" Match lines of the following two forms, taken from Vim's help
	"	[text]{white}{vi:|vim:|ex:}[white]{options}
	"	[text]{white}{vi:|vim:|Vim:|ex:}[white]se[t] {options}:[text]
	" Note that we do not verify the options themselves. We basically assume
	" the first form for 'vi:', 'vim:' and 'ex:', and then ignore everything
	" after the ':'. If we see 'Vim:', we assume the latter form, but only go
	" so far as to check that 'set' is there (for the second form, 'Vim:' must
	" use 'set', not 'se'.) This makes this regex a little more lenient than
	" Vim's actual checking.
	let l:form1 = '\C^.*[ \t]\+\(vim\=\|ex\):\s*'
	let l:form2 = '^.*[ \t]\+Vim:\s*set '

	" A list of the content of the lines Vim will check for modelines
	let l:lines = getline(1, &modelines)

	let l:match = match(l:lines, l:form1)
	if l:match != -1
		return l:match + 1
	endif
	let l:match = match(l:lines, l:form2)
	if l:match != -1
		return l:match + 1
	endif

	" To read the last &modelines line, figure out the start of the range of
	" lines (last line - &modelines.) Make sure the value we calculate is
	" valid (i.e., greater than 1.)
	let l:lastlineno = (line('$') - &modelines) > 0 ? (line('$') - &modelines) : 1
	let l:lines = getline(l:lastlineno, line('$'))

	let l:match = match(l:lines, l:form1)
	if l:match != -1
		return l:lastlineno + l:match
	endif
	let l:match = match(l:lines, l:form2)
	if l:match != -1
		return l:lastlineno + l:match
	endif

	return -1
endfunction

function! AppendModeline()
	" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
	" files.
	let l:modeline = printf(" vim: set tabstop=%d shiftwidth=%d textwidth=%d %sexpandtab foldmethod=%s filetype=%s:",
				\ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no', &foldmethod, &filetype)
	let l:modeline = substitute(&commentstring, "%s", l:modeline, "")

	let l:existing = GetModelineNumber()
	if l:existing != -1
		call setline(l:existing, l:modeline)
		echom "Modeline on line " . l:existing . " updated"
	else
		" Add a blank line between the last line and modeline, if one doesn't
		" already exist.
		if getline(line('$')) != ''
			call append(line('$'), '')
		endif
		call append(line("$"), l:modeline)
		echom "Modeline added to end of file"
	endif
endfunction


function! ToggleFormatAll()
	if &formatoptions =~ 'a'
		set formatoptions-=a
	else
		set formatoptions+=a
	endif
endfunction



""""""" Filetype settings {{{1

"" All code files

" Enable 'strip whitespace on save' functionality
function! FixWhitespaceIfAllowed()
	if exists('b:disableFixWhitspace')
		return
	endif
	FixWhitespace
endfunction
autocmd BufWritePre * call FixWhitespaceIfAllowed()
autocmd FileType markdown let b:disableFixWhitspace=1

"" Superconductor
au BufRead,BufNewFile *.{visualization,widget} set ft=javascript

"" Prolog
" Map *.p files to Prolog (for cs164 project)
au BufRead,BufNewFile *.{p} set ft=prolog

"" Git Commit
" Turn on spellchecking, auto-wrapping of long lines, and set width to 72
au FileType gitcommit setlocal spell spelllang=en_us textwidth=72 formatoptions+=troqal1jw formatoptions-=c formatoptions-=2 colorcolumn=73

"" Markdown
" Turn on spellchecking
au FileType markdown setlocal spell spelllang=en_us

"" Shell
" Highlight shell scripts as bash, not sh
let g:is_posix = 1

"" JavaScript
" Turn on HTML/DOM highlighting in JavaScript files
au FileType javascript setlocal expandtab "conceallevel=1 concealcursor=ncv
let javascript_enable_domhtmlcss = 1
" Replace certain JS keywords ('function', 'null', etc.) with symbols
let g:javascript_conceal = 1
let javascript_ignore_javaScriptdoc=1

"" OpenCL
" Check OpenCL syntax using Apple's OpenCL compiler
let g:syntastic_opencl_checkers = ['openclc']

"" Jujutsu commit messages
" Turn off line wrapping, it's annoying
au FileType jjdescription setlocal formatoptions-=l
au FileType jjdescription setlocal formatoptions-=t

""""""" Powerline {{{1
if has("python3")
	python3 from powerline.vim import setup as powerline_setup
	python3 powerline_setup()
	python3 del powerline_setup
else
	if has("python")
		python from powerline.vim import setup as powerline_setup
		python powerline_setup()
		python del powerline_setup
	endif
endif


""""""" NERDTree {{{1
if janus#is_plugin_enabled("nerdtree")
	call add(NERDTreeIgnore, '\.tmp$')
	call add(NERDTreeIgnore, '\.DS_Store$')
	call add(NERDTreeIgnore, '\.git$')
	let NERDTreeChDirMode=2
	let NERDTreeShowLineNumbers=0
	let NERDTreeStatusline=' '
	" Always shows hidden files
	let NERDTreeShowHidden=1

	nmap <silent> <leader>N :NERDTreeFind<CR>
endif


""""""" NERDTreeTabs {{{1
if exists("g:nerdtree_tabs_loaded")
	" These are already handled by vim-session and Janus
	let g:nerdtree_tabs_open_on_gui_startup=0
	let g:nerdtree_tabs_startup_cd=0

	map <Leader>n <plug>NERDTreeTabsToggle<CR>
endif


""""""" BufferGator {{{1
if janus#is_plugin_enabled("buffergator")
	" Map <leader>b to toggle, not simply open, the catalog
	nnoremap <silent> <Leader>b :BuffergatorToggle<CR>
	" Open on the right, so as not to interfere with NERDTree
	let g:buffergator_viewport_split_policy="R"
	" Don't expand the GUI window when opening the buffer list
	let g:buffergator_autoexpand_on_split=0
	" Auto-update the list of open buffers
	let g:buffergator_autoupdate=1
	" Sort the buffers by most recently used
	let g:buffergator_sort_regime="mru"
	" Show relative, not full, paths of the buffers
	let g:buffergator_show_full_directory_path=0
	" Calculate MRU based off of all windows, not per-window
	let g:buffergator_mru_cycle_local_to_window=0
	" Set the width of its vsplit window to 32
	let g:buffergator_vsplit_size=32
endif


""""""" YouCompleteMe {{{1
if exists( "g:loaded_youcompleteme" )
	" Close the function doc window after inserting completion
	let g:ycm_autoclose_preview_window_after_completion = 1
	" Only make down (rather than both tab & down) scroll down through
	" completions
	let g:ycm_key_list_select_completion = ['<Down>']
	" Ditto as above for scrolling up through completions
	let g:ycm_key_list_previous_completion = ['<Up>']

	inoremap <D-a> <C-e>
endif


""""""" CtrlP {{{1
if janus#is_plugin_enabled("ctrlp")
	" If a directory with a .ctrlproot file is found in parent directories,
	" mark that as project root
	let g:ctrlp_root_markers=['.ctrlproot']
	let g:ctrlp_open_new_file = 'r'

	let g:ctrlp_custom_ignore = {
		\ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
		\ 'dir': '\v[\/](\.(git|hg|svn)$\|node_modules$)'
	\ }

	" Use <Cmd-p> as 'search buffers+files+mru' mode
	map <silent> <D-p> :CtrlPMixed <CR>
	imap <silent> <D-p> <ESC>:CtrlPMixed <CR>

	" Map <Cmd-Shift-p> to 'search MRU' mode
	map <silent> <D-P> :CtrlPMRU <CR>
	imap <silent> <D-P> <ESC>:CtrlPBuffer <CR>

	" Map <Option-p> to 'search buffers' mode
	map <silent> π :CtrlPBuffer <CR>
	imap <silent> π <ESC>:CtrlPBuffer <CR>

	" Map <Option-Shift-p> to 'search files' mode
	map <silent> ∏ :CtrlP <CR>
	imap <silent> ∏ <ESC>:CtrlP <CR>
endif


""""""" UltiSnips {{{1
if exists('did_UltiSnips_vim')
	" Remap expansion key to C-j so that it doesn't interfere with
	" YouCompleteMe
	let g:UltiSnipsExpandTrigger="<C-j>"
endif


""""""" buftabs {{{1
"if janus#is_plugin_enabled("buftabs")
"  :set hidden
"  :let g:buftabs_in_statusline=1
"  :let g:buftabs_active_highlight_group="Visual"
"endif


""""""" tagbar {{{1
if janus#is_plugin_enabled("tagbar")
	" Sort tags according to file order
	let g:tagbar_sort = 0
	"let g:tagbar_type_javascript = {'ctagsbin' : '/Users/mtorok/bin/jsctags'}
	let g:tagbar_compact = 0
endif


""""""" vim-session {{{1
if exists("g:loaded_session")
	let g:session_autosave="yes"
	let g:session_autoload="yes"
	let g:session_default_to_last=1

	" After loading a session, find the active file in NERDTree, if it's open
	augroup MTorok
		autocmd SessionLoadPost * call s:syncNerdTree()
		autocmd VimEnter * call s:CloseSessionBuffer()
	augroup END

	" Reveal in NERDTree any open files within its current path This prevents
	" it from messing up your NERDTree because of one errant file.
	function s:syncNerdTree()
		" Only run if NERDTree is already present
		if exists("t:NERDTreeBufName")

			" This function will be called for every buffer, so filter for the
			" ones we want
			let s:bufPath=expand("%:p")

			" If the file doesn't exist, don't try to show it (this prevents
			" us from trying to show the NERDTree buffer)
			if !file_readable(s:bufPath)
				return
			endif

			" Only show files which are within the current NERDTree path
			let s:filePath = g:NERDTreePath.New(s:bufPath)
			if s:filePath.isUnder(g:NERDTreeFileNode.GetRootForTab().path)
				exe "NERDTreeFind"
			endif

		endif
	endfunction

	function s:CloseSessionBuffer()
		"if exists("s:closedSessionBuffer") == 0
			let s:closedSessionBuffer = 1
			let l:sessionName = xolox#session#find_current_session()
			if l:sessionName != ""
				let l:sessionPath = xolox#session#name_to_path(l:sessionName)
				if bufname(l:sessionPath) != ""
					bd bufname(l:sessionPath)
				endif
			endif

		"endif
	endfunction
endif


""""""" numbers.vim {{{1
if exists("g:loaded_numbers")
	nnoremap <F3> :NumbersToggle<CR>
	let g:numbers_exclude += ["help"]
endif


""""""" vim-indent-guides {{{1
if exists('g:loaded_indent_guides')
	" Enable indent guides by default
	" (This needs to be enabled in .vimrc.before to work, so it's commented out here)
	"let g:indent_guides_enable_on_vim_startup = 1

	" Don't use indent guides on help, nerdtree windows
	let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
	let g:indent_guides_start_level = 2
	" Make them only 1 column wide, rather than as wide as shiftwidth
	let g:indent_guides_guide_size = 1
endif


""""""" auto-pairs {{{1
if exists('g:AutoPairsLoaded')
	" Don't center the line in the window when inserting an autopair
	let g:AutoPairsCenterLine = 0
endif


" vim: set tabstop=4 shiftwidth=4 textwidth=78 noexpandtab foldmethod=marker filetype=vim:
